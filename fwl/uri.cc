
#line 1 "../fwl/uri.rl"
#include <string.h>
#include <sstream>
#include "uri.h"

namespace fwl{

/**
 * @brief uri parser by ragel 
 * @details 
 * 		line 9 to line 118
 * 		copy from [https://blog.csdn.net/weixin_43798887/article/details/116100949]	
 * */

#line 17 "../fwl/uri.cc"
static const char _uri_parser_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 6, 1, 7, 2, 
	0, 2, 2, 0, 3, 2, 0, 4, 
	2, 0, 5, 2, 0, 6, 2, 0, 
	7, 2, 3, 0, 2, 5, 0, 3, 
	0, 3, 4, 3, 0, 5, 4, 3, 
	3, 0, 4, 3, 5, 0, 4
};

static const short _uri_parser_key_offsets[] = {
	0, 0, 6, 12, 18, 24, 30, 36, 
	42, 48, 50, 52, 53, 59, 61, 63, 
	64, 70, 72, 74, 75, 81, 83, 85, 
	88, 91, 95, 98, 101, 104, 108, 111, 
	117, 123, 137, 143, 149, 155, 161, 169, 
	176, 183, 190, 191, 198, 205, 212, 219, 
	220, 227, 234, 241, 248, 249, 256, 263, 
	270, 277, 278, 285, 292, 299, 306, 307, 
	314, 321, 328, 335, 336, 347, 349, 351, 
	352, 358, 360, 362, 363, 369, 371, 373, 
	374, 380, 382, 384, 385, 388, 391, 395, 
	398, 401, 404, 408, 411, 414, 417, 421, 
	424, 432, 439, 446, 447, 454, 461, 468, 
	475, 483, 491, 499, 508, 516, 526, 534, 
	540, 547, 557, 565, 572, 579, 580, 588, 
	596, 604, 613, 621, 631, 639, 646, 652, 
	659, 666, 673, 674, 680, 687, 694, 701, 
	702, 708, 715, 722, 729, 730, 736, 743, 
	750, 757, 758, 759, 770, 779, 787, 795, 
	797, 807, 816, 824, 832, 834, 844, 853, 
	861, 869, 871, 881, 890, 898, 906, 908, 
	918, 927, 935, 943, 945, 955, 964, 972, 
	980, 982, 991, 1000, 1009, 1019, 1028, 1039, 
	1048, 1056, 1065, 1074, 1083, 1093, 1102, 1113, 
	1122, 1130, 1139, 1148, 1157, 1167, 1176, 1187, 
	1196, 1204, 1213, 1222, 1231, 1241, 1250, 1261, 
	1270, 1278, 1287, 1296, 1305, 1315, 1324, 1335, 
	1344, 1352, 1361, 1370, 1379, 1389, 1398, 1409, 
	1418, 1426, 1432, 1439, 1452, 1466, 1472, 1478, 
	1498, 1514, 1527, 1540, 1554, 1567, 1580, 1595, 
	1619, 1623, 1628, 1633, 1639, 1645, 1652, 1658, 
	1674, 1693, 1716, 1731, 1747, 1769, 1785, 1807, 
	1823, 1839, 1858, 1877, 1897, 1917, 1936, 1955, 
	1975, 1995, 2014, 2033, 2053, 2073, 2092, 2109, 
	2132, 2149, 2172, 2189, 2206, 2226, 2246, 2267, 
	2288, 2308, 2328, 2349, 2370, 2390, 2410, 2431, 
	2452, 2475, 2490
};

static const char _uri_parser_trans_keys[] = {
	48, 57, 65, 70, 97, 102, 48, 57, 
	65, 70, 97, 102, 48, 57, 65, 70, 
	97, 102, 48, 57, 65, 70, 97, 102, 
	48, 57, 65, 70, 97, 102, 48, 57, 
	65, 70, 97, 102, 48, 57, 65, 70, 
	97, 102, 48, 57, 65, 70, 97, 102, 
	48, 52, 48, 57, 46, 2, 48, 49, 
	50, 51, 57, 48, 52, 48, 57, 46, 
	2, 48, 49, 50, 51, 57, 48, 52, 
	48, 57, 46, 2, 48, 49, 50, 51, 
	57, 48, 52, 48, 57, 46, 48, 57, 
	46, 48, 57, 46, 53, 48, 57, 46, 
	48, 53, 46, 48, 57, 46, 48, 57, 
	46, 53, 48, 57, 46, 48, 53, 48, 
	57, 65, 70, 97, 102, 48, 57, 65, 
	70, 97, 102, 33, 37, 61, 64, 95, 
	126, 36, 46, 48, 59, 65, 90, 97, 
	122, 48, 57, 65, 70, 97, 102, 48, 
	57, 65, 70, 97, 102, 48, 57, 65, 
	70, 97, 102, 48, 57, 65, 70, 97, 
	102, 58, 118, 48, 57, 65, 70, 97, 
	102, 58, 48, 57, 65, 70, 97, 102, 
	58, 48, 57, 65, 70, 97, 102, 58, 
	48, 57, 65, 70, 97, 102, 58, 58, 
	48, 57, 65, 70, 97, 102, 58, 48, 
	57, 65, 70, 97, 102, 58, 48, 57, 
	65, 70, 97, 102, 58, 48, 57, 65, 
	70, 97, 102, 58, 58, 48, 57, 65, 
	70, 97, 102, 58, 48, 57, 65, 70, 
	97, 102, 58, 48, 57, 65, 70, 97, 
	102, 58, 48, 57, 65, 70, 97, 102, 
	58, 58, 48, 57, 65, 70, 97, 102, 
	58, 48, 57, 65, 70, 97, 102, 58, 
	48, 57, 65, 70, 97, 102, 58, 48, 
	57, 65, 70, 97, 102, 58, 58, 48, 
	57, 65, 70, 97, 102, 58, 48, 57, 
	65, 70, 97, 102, 58, 48, 57, 65, 
	70, 97, 102, 58, 48, 57, 65, 70, 
	97, 102, 58, 58, 48, 57, 65, 70, 
	97, 102, 58, 48, 57, 65, 70, 97, 
	102, 58, 48, 57, 65, 70, 97, 102, 
	58, 48, 57, 65, 70, 97, 102, 58, 
	2, 48, 49, 50, 58, 51, 57, 65, 
	70, 97, 102, 48, 52, 48, 57, 46, 
	2, 48, 49, 50, 51, 57, 48, 52, 
	48, 57, 46, 2, 48, 49, 50, 51, 
	57, 48, 52, 48, 57, 46, 2, 48, 
	49, 50, 51, 57, 48, 52, 48, 57, 
	93, 93, 48, 57, 93, 48, 57, 53, 
	93, 48, 57, 93, 48, 53, 46, 48, 
	57, 46, 48, 57, 46, 53, 48, 57, 
	46, 48, 53, 46, 48, 57, 46, 48, 
	57, 46, 53, 48, 57, 46, 48, 53, 
	46, 58, 48, 57, 65, 70, 97, 102, 
	58, 48, 57, 65, 70, 97, 102, 58, 
	48, 57, 65, 70, 97, 102, 58, 58, 
	48, 57, 65, 70, 97, 102, 93, 48, 
	57, 65, 70, 97, 102, 93, 48, 57, 
	65, 70, 97, 102, 93, 48, 57, 65, 
	70, 97, 102, 46, 58, 48, 57, 65, 
	70, 97, 102, 46, 58, 48, 57, 65, 
	70, 97, 102, 46, 58, 48, 57, 65, 
	70, 97, 102, 46, 53, 58, 48, 57, 
	65, 70, 97, 102, 46, 58, 48, 57, 
	65, 70, 97, 102, 46, 58, 48, 53, 
	54, 57, 65, 70, 97, 102, 46, 58, 
	48, 57, 65, 70, 97, 102, 48, 57, 
	65, 70, 97, 102, 58, 48, 57, 65, 
	70, 97, 102, 2, 48, 49, 50, 51, 
	57, 65, 70, 97, 102, 46, 58, 48, 
	57, 65, 70, 97, 102, 58, 48, 57, 
	65, 70, 97, 102, 58, 48, 57, 65, 
	70, 97, 102, 58, 46, 58, 48, 57, 
	65, 70, 97, 102, 46, 58, 48, 57, 
	65, 70, 97, 102, 46, 58, 48, 57, 
	65, 70, 97, 102, 46, 53, 58, 48, 
	57, 65, 70, 97, 102, 46, 58, 48, 
	57, 65, 70, 97, 102, 46, 58, 48, 
	53, 54, 57, 65, 70, 97, 102, 46, 
	58, 48, 57, 65, 70, 97, 102, 58, 
	48, 57, 65, 70, 97, 102, 48, 57, 
	65, 70, 97, 102, 58, 48, 57, 65, 
	70, 97, 102, 58, 48, 57, 65, 70, 
	97, 102, 58, 48, 57, 65, 70, 97, 
	102, 58, 48, 57, 65, 70, 97, 102, 
	58, 48, 57, 65, 70, 97, 102, 58, 
	48, 57, 65, 70, 97, 102, 58, 48, 
	57, 65, 70, 97, 102, 58, 48, 57, 
	65, 70, 97, 102, 58, 48, 57, 65, 
	70, 97, 102, 58, 48, 57, 65, 70, 
	97, 102, 58, 48, 57, 65, 70, 97, 
	102, 58, 48, 57, 65, 70, 97, 102, 
	58, 48, 57, 65, 70, 97, 102, 58, 
	48, 57, 65, 70, 97, 102, 58, 48, 
	57, 65, 70, 97, 102, 58, 58, 2, 
	48, 49, 50, 93, 51, 57, 65, 70, 
	97, 102, 46, 58, 93, 48, 57, 65, 
	70, 97, 102, 58, 93, 48, 57, 65, 
	70, 97, 102, 58, 93, 48, 57, 65, 
	70, 97, 102, 58, 93, 2, 48, 49, 
	50, 51, 57, 65, 70, 97, 102, 46, 
	58, 93, 48, 57, 65, 70, 97, 102, 
	58, 93, 48, 57, 65, 70, 97, 102, 
	58, 93, 48, 57, 65, 70, 97, 102, 
	58, 93, 2, 48, 49, 50, 51, 57, 
	65, 70, 97, 102, 46, 58, 93, 48, 
	57, 65, 70, 97, 102, 58, 93, 48, 
	57, 65, 70, 97, 102, 58, 93, 48, 
	57, 65, 70, 97, 102, 58, 93, 2, 
	48, 49, 50, 51, 57, 65, 70, 97, 
	102, 46, 58, 93, 48, 57, 65, 70, 
	97, 102, 58, 93, 48, 57, 65, 70, 
	97, 102, 58, 93, 48, 57, 65, 70, 
	97, 102, 58, 93, 2, 48, 49, 50, 
	51, 57, 65, 70, 97, 102, 46, 58, 
	93, 48, 57, 65, 70, 97, 102, 58, 
	93, 48, 57, 65, 70, 97, 102, 58, 
	93, 48, 57, 65, 70, 97, 102, 58, 
	93, 2, 48, 49, 50, 51, 57, 65, 
	70, 97, 102, 46, 58, 93, 48, 57, 
	65, 70, 97, 102, 58, 93, 48, 57, 
	65, 70, 97, 102, 58, 93, 48, 57, 
	65, 70, 97, 102, 58, 93, 46, 58, 
	93, 48, 57, 65, 70, 97, 102, 46, 
	58, 93, 48, 57, 65, 70, 97, 102, 
	46, 58, 93, 48, 57, 65, 70, 97, 
	102, 46, 53, 58, 93, 48, 57, 65, 
	70, 97, 102, 46, 58, 93, 48, 57, 
	65, 70, 97, 102, 46, 58, 93, 48, 
	53, 54, 57, 65, 70, 97, 102, 46, 
	58, 93, 48, 57, 65, 70, 97, 102, 
	58, 93, 48, 57, 65, 70, 97, 102, 
	46, 58, 93, 48, 57, 65, 70, 97, 
	102, 46, 58, 93, 48, 57, 65, 70, 
	97, 102, 46, 58, 93, 48, 57, 65, 
	70, 97, 102, 46, 53, 58, 93, 48, 
	57, 65, 70, 97, 102, 46, 58, 93, 
	48, 57, 65, 70, 97, 102, 46, 58, 
	93, 48, 53, 54, 57, 65, 70, 97, 
	102, 46, 58, 93, 48, 57, 65, 70, 
	97, 102, 58, 93, 48, 57, 65, 70, 
	97, 102, 46, 58, 93, 48, 57, 65, 
	70, 97, 102, 46, 58, 93, 48, 57, 
	65, 70, 97, 102, 46, 58, 93, 48, 
	57, 65, 70, 97, 102, 46, 53, 58, 
	93, 48, 57, 65, 70, 97, 102, 46, 
	58, 93, 48, 57, 65, 70, 97, 102, 
	46, 58, 93, 48, 53, 54, 57, 65, 
	70, 97, 102, 46, 58, 93, 48, 57, 
	65, 70, 97, 102, 58, 93, 48, 57, 
	65, 70, 97, 102, 46, 58, 93, 48, 
	57, 65, 70, 97, 102, 46, 58, 93, 
	48, 57, 65, 70, 97, 102, 46, 58, 
	93, 48, 57, 65, 70, 97, 102, 46, 
	53, 58, 93, 48, 57, 65, 70, 97, 
	102, 46, 58, 93, 48, 57, 65, 70, 
	97, 102, 46, 58, 93, 48, 53, 54, 
	57, 65, 70, 97, 102, 46, 58, 93, 
	48, 57, 65, 70, 97, 102, 58, 93, 
	48, 57, 65, 70, 97, 102, 46, 58, 
	93, 48, 57, 65, 70, 97, 102, 46, 
	58, 93, 48, 57, 65, 70, 97, 102, 
	46, 58, 93, 48, 57, 65, 70, 97, 
	102, 46, 53, 58, 93, 48, 57, 65, 
	70, 97, 102, 46, 58, 93, 48, 57, 
	65, 70, 97, 102, 46, 58, 93, 48, 
	53, 54, 57, 65, 70, 97, 102, 46, 
	58, 93, 48, 57, 65, 70, 97, 102, 
	58, 93, 48, 57, 65, 70, 97, 102, 
	46, 58, 93, 48, 57, 65, 70, 97, 
	102, 46, 58, 93, 48, 57, 65, 70, 
	97, 102, 46, 58, 93, 48, 57, 65, 
	70, 97, 102, 46, 53, 58, 93, 48, 
	57, 65, 70, 97, 102, 46, 58, 93, 
	48, 57, 65, 70, 97, 102, 46, 58, 
	93, 48, 53, 54, 57, 65, 70, 97, 
	102, 46, 58, 93, 48, 57, 65, 70, 
	97, 102, 58, 93, 48, 57, 65, 70, 
	97, 102, 48, 57, 65, 70, 97, 102, 
	46, 48, 57, 65, 70, 97, 102, 33, 
	36, 61, 95, 126, 38, 46, 48, 59, 
	65, 90, 97, 122, 33, 36, 61, 93, 
	95, 126, 38, 46, 48, 59, 65, 90, 
	97, 122, 48, 57, 65, 70, 97, 102, 
	48, 57, 65, 70, 97, 102, 34, 35, 
	37, 47, 58, 60, 62, 63, 96, 127, 
	0, 32, 65, 90, 91, 94, 97, 122, 
	123, 125, 34, 35, 37, 47, 58, 60, 
	62, 63, 96, 127, 0, 32, 91, 94, 
	123, 125, 37, 60, 62, 96, 127, 0, 
	32, 34, 35, 91, 94, 123, 125, 37, 
	60, 62, 96, 127, 0, 32, 34, 35, 
	91, 94, 123, 125, 34, 35, 37, 60, 
	62, 63, 96, 127, 0, 32, 91, 94, 
	123, 125, 34, 35, 37, 60, 62, 96, 
	127, 0, 32, 91, 94, 123, 125, 34, 
	35, 37, 60, 62, 96, 127, 0, 32, 
	91, 94, 123, 125, 34, 35, 37, 47, 
	60, 62, 63, 96, 127, 0, 32, 91, 
	94, 123, 125, 2, 33, 35, 37, 47, 
	48, 49, 50, 58, 59, 61, 63, 64, 
	91, 95, 126, 36, 46, 51, 57, 65, 
	90, 97, 122, 35, 47, 58, 63, 35, 
	47, 63, 48, 57, 35, 47, 63, 48, 
	57, 35, 47, 58, 63, 48, 57, 35, 
	47, 58, 63, 48, 57, 35, 47, 53, 
	58, 63, 48, 57, 35, 47, 58, 63, 
	48, 53, 33, 35, 37, 47, 58, 61, 
	63, 64, 95, 126, 36, 59, 65, 90, 
	97, 122, 33, 35, 37, 47, 61, 63, 
	64, 95, 126, 36, 46, 48, 57, 58, 
	59, 65, 90, 97, 122, 2, 33, 35, 
	37, 47, 48, 49, 50, 58, 59, 61, 
	63, 91, 95, 126, 36, 46, 51, 57, 
	65, 90, 97, 122, 33, 35, 37, 47, 
	58, 61, 63, 95, 126, 36, 59, 65, 
	90, 97, 122, 33, 35, 37, 46, 47, 
	58, 61, 63, 95, 126, 36, 59, 65, 
	90, 97, 122, 2, 33, 35, 37, 47, 
	48, 49, 50, 58, 59, 61, 63, 95, 
	126, 36, 46, 51, 57, 65, 90, 97, 
	122, 33, 35, 37, 46, 47, 58, 61, 
	63, 95, 126, 36, 59, 65, 90, 97, 
	122, 2, 33, 35, 37, 47, 48, 49, 
	50, 58, 59, 61, 63, 95, 126, 36, 
	46, 51, 57, 65, 90, 97, 122, 33, 
	35, 37, 46, 47, 58, 61, 63, 95, 
	126, 36, 59, 65, 90, 97, 122, 2, 
	33, 35, 37, 47, 58, 61, 63, 95, 
	126, 36, 59, 65, 90, 97, 122, 33, 
	35, 37, 46, 47, 58, 59, 61, 63, 
	95, 126, 36, 45, 48, 57, 65, 90, 
	97, 122, 33, 35, 37, 46, 47, 58, 
	59, 61, 63, 95, 126, 36, 45, 48, 
	57, 65, 90, 97, 122, 33, 35, 37, 
	46, 47, 53, 58, 59, 61, 63, 95, 
	126, 36, 45, 48, 57, 65, 90, 97, 
	122, 33, 35, 37, 46, 47, 58, 61, 
	63, 95, 126, 36, 45, 48, 53, 54, 
	59, 65, 90, 97, 122, 33, 35, 37, 
	46, 47, 58, 59, 61, 63, 95, 126, 
	36, 45, 48, 57, 65, 90, 97, 122, 
	33, 35, 37, 46, 47, 58, 59, 61, 
	63, 95, 126, 36, 45, 48, 57, 65, 
	90, 97, 122, 33, 35, 37, 46, 47, 
	53, 58, 59, 61, 63, 95, 126, 36, 
	45, 48, 57, 65, 90, 97, 122, 33, 
	35, 37, 46, 47, 58, 61, 63, 95, 
	126, 36, 45, 48, 53, 54, 59, 65, 
	90, 97, 122, 33, 35, 37, 46, 47, 
	58, 59, 61, 63, 95, 126, 36, 45, 
	48, 57, 65, 90, 97, 122, 33, 35, 
	37, 46, 47, 58, 59, 61, 63, 95, 
	126, 36, 45, 48, 57, 65, 90, 97, 
	122, 33, 35, 37, 46, 47, 53, 58, 
	59, 61, 63, 95, 126, 36, 45, 48, 
	57, 65, 90, 97, 122, 33, 35, 37, 
	46, 47, 58, 61, 63, 95, 126, 36, 
	45, 48, 53, 54, 59, 65, 90, 97, 
	122, 33, 35, 37, 47, 61, 63, 64, 
	95, 126, 36, 46, 48, 57, 58, 59, 
	65, 90, 97, 122, 33, 35, 37, 46, 
	47, 58, 61, 63, 64, 95, 126, 36, 
	59, 65, 90, 97, 122, 2, 33, 35, 
	37, 47, 48, 49, 50, 58, 59, 61, 
	63, 64, 95, 126, 36, 46, 51, 57, 
	65, 90, 97, 122, 33, 35, 37, 46, 
	47, 58, 61, 63, 64, 95, 126, 36, 
	59, 65, 90, 97, 122, 2, 33, 35, 
	37, 47, 48, 49, 50, 58, 59, 61, 
	63, 64, 95, 126, 36, 46, 51, 57, 
	65, 90, 97, 122, 33, 35, 37, 46, 
	47, 58, 61, 63, 64, 95, 126, 36, 
	59, 65, 90, 97, 122, 2, 33, 35, 
	37, 47, 58, 61, 63, 64, 95, 126, 
	36, 59, 65, 90, 97, 122, 33, 35, 
	37, 46, 47, 58, 59, 61, 63, 64, 
	95, 126, 36, 45, 48, 57, 65, 90, 
	97, 122, 33, 35, 37, 46, 47, 58, 
	59, 61, 63, 64, 95, 126, 36, 45, 
	48, 57, 65, 90, 97, 122, 33, 35, 
	37, 46, 47, 53, 58, 59, 61, 63, 
	64, 95, 126, 36, 45, 48, 57, 65, 
	90, 97, 122, 33, 35, 37, 46, 47, 
	58, 61, 63, 64, 95, 126, 36, 45, 
	48, 53, 54, 59, 65, 90, 97, 122, 
	33, 35, 37, 46, 47, 58, 59, 61, 
	63, 64, 95, 126, 36, 45, 48, 57, 
	65, 90, 97, 122, 33, 35, 37, 46, 
	47, 58, 59, 61, 63, 64, 95, 126, 
	36, 45, 48, 57, 65, 90, 97, 122, 
	33, 35, 37, 46, 47, 53, 58, 59, 
	61, 63, 64, 95, 126, 36, 45, 48, 
	57, 65, 90, 97, 122, 33, 35, 37, 
	46, 47, 58, 61, 63, 64, 95, 126, 
	36, 45, 48, 53, 54, 59, 65, 90, 
	97, 122, 33, 35, 37, 46, 47, 58, 
	59, 61, 63, 64, 95, 126, 36, 45, 
	48, 57, 65, 90, 97, 122, 33, 35, 
	37, 46, 47, 58, 59, 61, 63, 64, 
	95, 126, 36, 45, 48, 57, 65, 90, 
	97, 122, 33, 35, 37, 46, 47, 53, 
	58, 59, 61, 63, 64, 95, 126, 36, 
	45, 48, 57, 65, 90, 97, 122, 33, 
	35, 37, 46, 47, 58, 61, 63, 64, 
	95, 126, 36, 45, 48, 53, 54, 59, 
	65, 90, 97, 122, 34, 35, 37, 43, 
	47, 58, 60, 62, 63, 96, 127, 0, 
	32, 45, 57, 65, 90, 91, 94, 97, 
	122, 123, 125, 34, 35, 37, 47, 60, 
	62, 63, 96, 127, 0, 32, 91, 94, 
	123, 125, 34, 35, 37, 47, 60, 62, 
	63, 96, 127, 0, 32, 91, 94, 123, 
	125, 0
};

static const char _uri_parser_single_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 4, 0, 0, 1, 
	4, 0, 0, 1, 4, 0, 0, 1, 
	1, 2, 1, 1, 1, 2, 1, 0, 
	0, 6, 0, 0, 0, 0, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 5, 0, 0, 1, 
	4, 0, 0, 1, 4, 0, 0, 1, 
	4, 0, 0, 1, 1, 1, 2, 1, 
	1, 1, 2, 1, 1, 1, 2, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	2, 2, 2, 3, 2, 2, 2, 0, 
	1, 4, 2, 1, 1, 1, 2, 2, 
	2, 3, 2, 2, 2, 1, 0, 1, 
	1, 1, 1, 0, 1, 1, 1, 1, 
	0, 1, 1, 1, 1, 0, 1, 1, 
	1, 1, 1, 5, 3, 2, 2, 2, 
	4, 3, 2, 2, 2, 4, 3, 2, 
	2, 2, 4, 3, 2, 2, 2, 4, 
	3, 2, 2, 2, 4, 3, 2, 2, 
	2, 3, 3, 3, 4, 3, 3, 3, 
	2, 3, 3, 3, 4, 3, 3, 3, 
	2, 3, 3, 3, 4, 3, 3, 3, 
	2, 3, 3, 3, 4, 3, 3, 3, 
	2, 3, 3, 3, 4, 3, 3, 3, 
	2, 3, 3, 3, 4, 3, 3, 3, 
	2, 0, 1, 5, 6, 0, 0, 10, 
	10, 5, 5, 8, 7, 7, 9, 16, 
	4, 3, 3, 4, 4, 5, 4, 10, 
	9, 15, 9, 10, 14, 10, 14, 10, 
	10, 11, 11, 12, 10, 11, 11, 12, 
	10, 11, 11, 12, 10, 9, 11, 15, 
	11, 15, 11, 11, 12, 12, 13, 11, 
	12, 12, 13, 11, 12, 12, 13, 11, 
	11, 9, 9
};

static const char _uri_parser_range_lengths[] = {
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 1, 1, 0, 1, 1, 1, 0, 
	1, 1, 1, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	3, 4, 3, 3, 3, 3, 3, 3, 
	3, 3, 0, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 0, 3, 3, 3, 
	3, 0, 3, 3, 3, 3, 0, 3, 
	3, 3, 3, 0, 3, 1, 1, 0, 
	1, 1, 1, 0, 1, 1, 1, 0, 
	1, 1, 1, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 3, 3, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 4, 3, 3, 
	3, 3, 3, 3, 3, 0, 3, 3, 
	3, 3, 3, 4, 3, 3, 3, 3, 
	3, 3, 0, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 0, 3, 3, 3, 
	3, 0, 0, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 0, 3, 3, 3, 
	3, 0, 3, 3, 3, 3, 0, 3, 
	3, 3, 3, 0, 3, 3, 3, 3, 
	0, 3, 3, 3, 3, 3, 4, 3, 
	3, 3, 3, 3, 3, 3, 4, 3, 
	3, 3, 3, 3, 3, 3, 4, 3, 
	3, 3, 3, 3, 3, 3, 4, 3, 
	3, 3, 3, 3, 3, 3, 4, 3, 
	3, 3, 3, 3, 3, 3, 4, 3, 
	3, 3, 3, 4, 4, 3, 3, 5, 
	3, 4, 4, 3, 3, 3, 3, 4, 
	0, 1, 1, 1, 1, 1, 1, 3, 
	5, 4, 3, 3, 4, 3, 4, 3, 
	3, 4, 4, 4, 5, 4, 4, 4, 
	5, 4, 4, 4, 5, 5, 3, 4, 
	3, 4, 3, 3, 4, 4, 4, 5, 
	4, 4, 4, 5, 4, 4, 4, 5, 
	6, 3, 3
};

static const short _uri_parser_index_offsets[] = {
	0, 0, 4, 8, 12, 16, 20, 24, 
	28, 32, 34, 36, 38, 44, 46, 48, 
	50, 56, 58, 60, 62, 68, 70, 72, 
	75, 78, 82, 85, 88, 91, 95, 98, 
	102, 106, 117, 121, 125, 129, 133, 139, 
	144, 149, 154, 156, 161, 166, 171, 176, 
	178, 183, 188, 193, 198, 200, 205, 210, 
	215, 220, 222, 227, 232, 237, 242, 244, 
	249, 254, 259, 264, 266, 275, 277, 279, 
	281, 287, 289, 291, 293, 299, 301, 303, 
	305, 311, 313, 315, 317, 320, 323, 327, 
	330, 333, 336, 340, 343, 346, 349, 353, 
	356, 362, 367, 372, 374, 379, 384, 389, 
	394, 400, 406, 412, 419, 425, 432, 438, 
	442, 447, 455, 461, 466, 471, 473, 479, 
	485, 491, 498, 504, 511, 517, 522, 526, 
	531, 536, 541, 543, 547, 552, 557, 562, 
	564, 568, 573, 578, 583, 585, 589, 594, 
	599, 604, 606, 608, 617, 624, 630, 636, 
	639, 647, 654, 660, 666, 669, 677, 684, 
	690, 696, 699, 707, 714, 720, 726, 729, 
	737, 744, 750, 756, 759, 767, 774, 780, 
	786, 789, 796, 803, 810, 818, 825, 833, 
	840, 846, 853, 860, 867, 875, 882, 890, 
	897, 903, 910, 917, 924, 932, 939, 947, 
	954, 960, 967, 974, 981, 989, 996, 1004, 
	1011, 1017, 1024, 1031, 1038, 1046, 1053, 1061, 
	1068, 1074, 1081, 1088, 1095, 1103, 1110, 1118, 
	1125, 1131, 1135, 1140, 1150, 1161, 1165, 1169, 
	1185, 1199, 1209, 1219, 1231, 1242, 1253, 1266, 
	1287, 1292, 1297, 1302, 1308, 1314, 1321, 1327, 
	1341, 1356, 1376, 1389, 1403, 1422, 1436, 1455, 
	1469, 1483, 1499, 1515, 1532, 1548, 1564, 1580, 
	1597, 1613, 1629, 1645, 1662, 1678, 1693, 1708, 
	1728, 1743, 1763, 1778, 1793, 1810, 1827, 1845, 
	1862, 1879, 1896, 1914, 1931, 1948, 1965, 1983, 
	2000, 2018, 2031
};

static const short _uri_parser_indicies[] = {
	0, 0, 0, 1, 2, 2, 2, 1, 
	3, 3, 3, 1, 4, 4, 4, 1, 
	5, 5, 5, 1, 6, 6, 6, 1, 
	7, 7, 7, 1, 8, 8, 8, 1, 
	9, 1, 10, 1, 11, 1, 12, 13, 
	14, 15, 16, 1, 17, 1, 13, 1, 
	18, 1, 19, 20, 21, 22, 23, 1, 
	24, 1, 20, 1, 25, 1, 26, 27, 
	28, 29, 30, 1, 31, 1, 27, 1, 
	25, 23, 1, 25, 20, 1, 25, 32, 
	20, 1, 25, 20, 1, 18, 16, 1, 
	18, 13, 1, 18, 33, 13, 1, 18, 
	13, 1, 34, 34, 34, 1, 35, 35, 
	35, 1, 36, 37, 36, 38, 36, 36, 
	36, 36, 36, 36, 1, 39, 39, 39, 
	1, 36, 36, 36, 1, 40, 40, 40, 
	1, 41, 41, 41, 1, 43, 44, 42, 
	42, 42, 1, 46, 45, 45, 45, 1, 
	46, 47, 47, 47, 1, 46, 48, 48, 
	48, 1, 46, 1, 50, 49, 49, 49, 
	1, 52, 51, 51, 51, 1, 52, 53, 
	53, 53, 1, 52, 54, 54, 54, 1, 
	52, 1, 56, 55, 55, 55, 1, 58, 
	57, 57, 57, 1, 58, 59, 59, 59, 
	1, 58, 60, 60, 60, 1, 58, 1, 
	62, 61, 61, 61, 1, 64, 63, 63, 
	63, 1, 64, 65, 65, 65, 1, 64, 
	66, 66, 66, 1, 64, 1, 68, 67, 
	67, 67, 1, 70, 69, 69, 69, 1, 
	70, 71, 71, 71, 1, 70, 72, 72, 
	72, 1, 70, 1, 74, 73, 73, 73, 
	1, 76, 75, 75, 75, 1, 76, 77, 
	77, 77, 1, 76, 78, 78, 78, 1, 
	76, 1, 79, 80, 81, 82, 84, 83, 
	85, 85, 1, 86, 1, 87, 1, 88, 
	1, 89, 90, 91, 92, 93, 1, 94, 
	1, 90, 1, 95, 1, 96, 97, 98, 
	99, 100, 1, 101, 1, 97, 1, 102, 
	1, 103, 104, 105, 106, 107, 1, 108, 
	1, 104, 1, 27, 1, 27, 107, 1, 
	27, 104, 1, 109, 27, 104, 1, 27, 
	104, 1, 102, 100, 1, 102, 97, 1, 
	102, 110, 97, 1, 102, 97, 1, 95, 
	93, 1, 95, 90, 1, 95, 111, 90, 
	1, 95, 90, 1, 88, 113, 112, 112, 
	112, 1, 113, 114, 114, 114, 1, 113, 
	115, 115, 115, 1, 113, 1, 104, 116, 
	116, 116, 1, 27, 117, 117, 117, 1, 
	27, 118, 118, 118, 1, 27, 104, 104, 
	104, 1, 88, 113, 119, 112, 112, 1, 
	88, 113, 120, 114, 114, 1, 88, 113, 
	115, 115, 115, 1, 88, 122, 113, 121, 
	112, 112, 1, 88, 113, 114, 114, 114, 
	1, 88, 113, 120, 114, 114, 114, 1, 
	88, 113, 121, 112, 112, 1, 116, 116, 
	116, 1, 113, 112, 112, 112, 1, 79, 
	123, 124, 125, 126, 127, 127, 1, 88, 
	84, 128, 128, 128, 1, 84, 129, 129, 
	129, 1, 84, 130, 130, 130, 1, 84, 
	1, 88, 84, 131, 128, 128, 1, 88, 
	84, 132, 129, 129, 1, 88, 84, 130, 
	130, 130, 1, 88, 134, 84, 133, 128, 
	128, 1, 88, 84, 129, 129, 129, 1, 
	88, 84, 132, 129, 129, 129, 1, 88, 
	84, 133, 128, 128, 1, 84, 128, 128, 
	128, 1, 135, 135, 135, 1, 74, 136, 
	136, 136, 1, 74, 137, 137, 137, 1, 
	74, 138, 138, 138, 1, 74, 1, 139, 
	139, 139, 1, 68, 140, 140, 140, 1, 
	68, 141, 141, 141, 1, 68, 142, 142, 
	142, 1, 68, 1, 143, 143, 143, 1, 
	62, 144, 144, 144, 1, 62, 145, 145, 
	145, 1, 62, 146, 146, 146, 1, 62, 
	1, 147, 147, 147, 1, 56, 148, 148, 
	148, 1, 56, 149, 149, 149, 1, 56, 
	150, 150, 150, 1, 56, 1, 151, 1, 
	79, 152, 153, 154, 27, 155, 156, 156, 
	1, 88, 158, 27, 157, 157, 157, 1, 
	158, 27, 159, 159, 159, 1, 158, 27, 
	160, 160, 160, 1, 158, 27, 1, 79, 
	161, 162, 163, 164, 165, 165, 1, 88, 
	167, 27, 166, 166, 166, 1, 167, 27, 
	168, 168, 168, 1, 167, 27, 169, 169, 
	169, 1, 167, 27, 1, 79, 170, 171, 
	172, 173, 174, 174, 1, 88, 176, 27, 
	175, 175, 175, 1, 176, 27, 177, 177, 
	177, 1, 176, 27, 178, 178, 178, 1, 
	176, 27, 1, 79, 179, 180, 181, 182, 
	183, 183, 1, 88, 185, 27, 184, 184, 
	184, 1, 185, 27, 186, 186, 186, 1, 
	185, 27, 187, 187, 187, 1, 185, 27, 
	1, 79, 188, 189, 190, 191, 192, 192, 
	1, 88, 194, 27, 193, 193, 193, 1, 
	194, 27, 195, 195, 195, 1, 194, 27, 
	196, 196, 196, 1, 194, 27, 1, 79, 
	197, 198, 199, 200, 201, 201, 1, 88, 
	84, 27, 202, 202, 202, 1, 84, 27, 
	203, 203, 203, 1, 84, 27, 204, 204, 
	204, 1, 84, 27, 1, 88, 84, 27, 
	205, 202, 202, 1, 88, 84, 27, 206, 
	203, 203, 1, 88, 84, 27, 204, 204, 
	204, 1, 88, 208, 84, 27, 207, 202, 
	202, 1, 88, 84, 27, 203, 203, 203, 
	1, 88, 84, 27, 206, 203, 203, 203, 
	1, 88, 84, 27, 207, 202, 202, 1, 
	84, 27, 202, 202, 202, 1, 88, 194, 
	27, 209, 193, 193, 1, 88, 194, 27, 
	210, 195, 195, 1, 88, 194, 27, 196, 
	196, 196, 1, 88, 212, 194, 27, 211, 
	193, 193, 1, 88, 194, 27, 195, 195, 
	195, 1, 88, 194, 27, 210, 195, 195, 
	195, 1, 88, 194, 27, 211, 193, 193, 
	1, 194, 27, 193, 193, 193, 1, 88, 
	185, 27, 213, 184, 184, 1, 88, 185, 
	27, 214, 186, 186, 1, 88, 185, 27, 
	187, 187, 187, 1, 88, 216, 185, 27, 
	215, 184, 184, 1, 88, 185, 27, 186, 
	186, 186, 1, 88, 185, 27, 214, 186, 
	186, 186, 1, 88, 185, 27, 215, 184, 
	184, 1, 185, 27, 184, 184, 184, 1, 
	88, 176, 27, 217, 175, 175, 1, 88, 
	176, 27, 218, 177, 177, 1, 88, 176, 
	27, 178, 178, 178, 1, 88, 220, 176, 
	27, 219, 175, 175, 1, 88, 176, 27, 
	177, 177, 177, 1, 88, 176, 27, 218, 
	177, 177, 177, 1, 88, 176, 27, 219, 
	175, 175, 1, 176, 27, 175, 175, 175, 
	1, 88, 167, 27, 221, 166, 166, 1, 
	88, 167, 27, 222, 168, 168, 1, 88, 
	167, 27, 169, 169, 169, 1, 88, 224, 
	167, 27, 223, 166, 166, 1, 88, 167, 
	27, 168, 168, 168, 1, 88, 167, 27, 
	222, 168, 168, 168, 1, 88, 167, 27, 
	223, 166, 166, 1, 167, 27, 166, 166, 
	166, 1, 88, 158, 27, 225, 157, 157, 
	1, 88, 158, 27, 226, 159, 159, 1, 
	88, 158, 27, 160, 160, 160, 1, 88, 
	228, 158, 27, 227, 157, 157, 1, 88, 
	158, 27, 159, 159, 159, 1, 88, 158, 
	27, 226, 159, 159, 159, 1, 88, 158, 
	27, 227, 157, 157, 1, 158, 27, 157, 
	157, 157, 1, 229, 229, 229, 1, 230, 
	229, 229, 229, 1, 231, 231, 231, 231, 
	231, 231, 231, 231, 231, 1, 231, 231, 
	231, 27, 231, 231, 231, 231, 231, 231, 
	1, 232, 232, 232, 1, 233, 233, 233, 
	1, 1, 234, 235, 236, 1, 1, 1, 
	237, 1, 1, 1, 238, 1, 238, 1, 
	4, 1, 234, 235, 239, 1, 1, 1, 
	237, 1, 1, 1, 1, 1, 4, 241, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	240, 242, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 243, 244, 1, 1, 
	245, 1, 1, 1, 1, 1, 6, 1, 
	247, 248, 1, 1, 1, 1, 1, 1, 
	1, 246, 1, 249, 250, 1, 1, 1, 
	1, 1, 1, 1, 8, 1, 243, 244, 
	251, 1, 1, 245, 1, 1, 1, 1, 
	1, 6, 252, 253, 254, 255, 256, 257, 
	258, 259, 261, 253, 253, 262, 263, 264, 
	253, 253, 253, 260, 253, 253, 1, 265, 
	266, 267, 268, 1, 269, 270, 272, 271, 
	1, 273, 274, 276, 275, 1, 265, 266, 
	267, 268, 30, 1, 265, 266, 267, 268, 
	27, 1, 265, 266, 277, 267, 268, 27, 
	1, 265, 266, 267, 268, 27, 1, 35, 
	265, 278, 266, 279, 35, 268, 38, 35, 
	35, 35, 35, 35, 1, 36, 269, 37, 
	270, 36, 272, 38, 36, 36, 36, 280, 
	36, 36, 36, 1, 252, 281, 254, 282, 
	256, 283, 284, 285, 287, 281, 281, 262, 
	264, 281, 281, 281, 286, 281, 281, 1, 
	41, 265, 288, 266, 267, 41, 268, 41, 
	41, 41, 41, 41, 1, 41, 265, 288, 
	289, 266, 267, 41, 268, 41, 41, 41, 
	41, 41, 1, 12, 41, 265, 288, 266, 
	290, 291, 292, 267, 41, 41, 268, 41, 
	41, 41, 293, 41, 41, 1, 41, 265, 
	288, 294, 266, 267, 41, 268, 41, 41, 
	41, 41, 41, 1, 19, 41, 265, 288, 
	266, 295, 296, 297, 267, 41, 41, 268, 
	41, 41, 41, 298, 41, 41, 1, 41, 
	265, 288, 299, 266, 267, 41, 268, 41, 
	41, 41, 41, 41, 1, 26, 41, 265, 
	288, 266, 267, 41, 268, 41, 41, 41, 
	41, 41, 1, 41, 265, 288, 299, 266, 
	267, 41, 41, 268, 41, 41, 41, 298, 
	41, 41, 1, 41, 265, 288, 299, 266, 
	267, 41, 41, 268, 41, 41, 41, 295, 
	41, 41, 1, 41, 265, 288, 299, 266, 
	300, 267, 41, 41, 268, 41, 41, 41, 
	295, 41, 41, 1, 41, 265, 288, 299, 
	266, 267, 41, 268, 41, 41, 41, 295, 
	41, 41, 41, 1, 41, 265, 288, 294, 
	266, 267, 41, 41, 268, 41, 41, 41, 
	293, 41, 41, 1, 41, 265, 288, 294, 
	266, 267, 41, 41, 268, 41, 41, 41, 
	290, 41, 41, 1, 41, 265, 288, 294, 
	266, 301, 267, 41, 41, 268, 41, 41, 
	41, 290, 41, 41, 1, 41, 265, 288, 
	294, 266, 267, 41, 268, 41, 41, 41, 
	290, 41, 41, 41, 1, 41, 265, 288, 
	289, 266, 267, 41, 41, 268, 41, 41, 
	41, 302, 41, 41, 1, 41, 265, 288, 
	289, 266, 267, 41, 41, 268, 41, 41, 
	41, 303, 41, 41, 1, 41, 265, 288, 
	289, 266, 304, 267, 41, 41, 268, 41, 
	41, 41, 303, 41, 41, 1, 41, 265, 
	288, 289, 266, 267, 41, 268, 41, 41, 
	41, 303, 41, 41, 41, 1, 36, 273, 
	37, 274, 36, 276, 38, 36, 36, 36, 
	305, 36, 36, 36, 1, 35, 265, 278, 
	306, 266, 279, 35, 268, 38, 35, 35, 
	35, 35, 35, 1, 12, 35, 265, 278, 
	266, 307, 308, 309, 279, 35, 35, 268, 
	38, 35, 35, 35, 310, 35, 35, 1, 
	35, 265, 278, 311, 266, 279, 35, 268, 
	38, 35, 35, 35, 35, 35, 1, 19, 
	35, 265, 278, 266, 312, 313, 314, 279, 
	35, 35, 268, 38, 35, 35, 35, 315, 
	35, 35, 1, 35, 265, 278, 316, 266, 
	279, 35, 268, 38, 35, 35, 35, 35, 
	35, 1, 26, 35, 265, 278, 266, 279, 
	35, 268, 38, 35, 35, 35, 35, 35, 
	1, 35, 265, 278, 316, 266, 279, 35, 
	35, 268, 38, 35, 35, 35, 315, 35, 
	35, 1, 35, 265, 278, 316, 266, 279, 
	35, 35, 268, 38, 35, 35, 35, 312, 
	35, 35, 1, 35, 265, 278, 316, 266, 
	317, 279, 35, 35, 268, 38, 35, 35, 
	35, 312, 35, 35, 1, 35, 265, 278, 
	316, 266, 279, 35, 268, 38, 35, 35, 
	35, 312, 35, 35, 35, 1, 35, 265, 
	278, 311, 266, 279, 35, 35, 268, 38, 
	35, 35, 35, 310, 35, 35, 1, 35, 
	265, 278, 311, 266, 279, 35, 35, 268, 
	38, 35, 35, 35, 307, 35, 35, 1, 
	35, 265, 278, 311, 266, 318, 279, 35, 
	35, 268, 38, 35, 35, 35, 307, 35, 
	35, 1, 35, 265, 278, 311, 266, 279, 
	35, 268, 38, 35, 35, 35, 307, 35, 
	35, 35, 1, 35, 265, 278, 306, 266, 
	279, 35, 35, 268, 38, 35, 35, 35, 
	319, 35, 35, 1, 35, 265, 278, 306, 
	266, 279, 35, 35, 268, 38, 35, 35, 
	35, 320, 35, 35, 1, 35, 265, 278, 
	306, 266, 321, 279, 35, 35, 268, 38, 
	35, 35, 35, 320, 35, 35, 1, 35, 
	265, 278, 306, 266, 279, 35, 268, 38, 
	35, 35, 35, 320, 35, 35, 35, 1, 
	1, 234, 235, 322, 239, 323, 1, 1, 
	237, 1, 1, 1, 322, 322, 1, 322, 
	1, 4, 1, 234, 324, 236, 1, 1, 
	237, 1, 1, 1, 1, 1, 233, 1, 
	234, 324, 239, 1, 1, 237, 1, 1, 
	1, 1, 1, 233, 0
};

static const short _uri_parser_trans_targs[] = {
	2, 0, 234, 4, 232, 6, 235, 8, 
	237, 10, 11, 12, 13, 15, 27, 29, 
	28, 14, 16, 17, 19, 23, 25, 24, 
	18, 20, 21, 240, 243, 245, 244, 22, 
	26, 30, 32, 247, 33, 34, 249, 35, 
	37, 250, 39, 146, 225, 40, 43, 41, 
	42, 44, 141, 45, 48, 46, 47, 49, 
	136, 50, 53, 51, 52, 54, 131, 55, 
	58, 56, 57, 59, 126, 60, 63, 61, 
	62, 64, 113, 65, 68, 66, 67, 69, 
	96, 104, 107, 110, 111, 112, 70, 71, 
	72, 73, 75, 92, 94, 93, 74, 76, 
	77, 79, 88, 90, 89, 78, 80, 81, 
	83, 84, 86, 85, 82, 87, 91, 95, 
	97, 100, 98, 99, 101, 102, 103, 105, 
	106, 108, 109, 114, 118, 121, 124, 125, 
	115, 116, 117, 119, 120, 122, 123, 127, 
	128, 129, 130, 132, 133, 134, 135, 137, 
	138, 139, 140, 142, 143, 144, 145, 147, 
	148, 217, 220, 223, 224, 149, 152, 150, 
	151, 153, 209, 212, 215, 216, 154, 157, 
	155, 156, 158, 201, 204, 207, 208, 159, 
	162, 160, 161, 163, 193, 196, 199, 200, 
	164, 167, 165, 166, 168, 185, 188, 191, 
	192, 169, 172, 170, 171, 173, 177, 180, 
	183, 184, 174, 175, 176, 178, 179, 181, 
	182, 186, 187, 189, 190, 194, 195, 197, 
	198, 202, 203, 205, 206, 210, 211, 213, 
	214, 218, 219, 221, 222, 226, 227, 228, 
	230, 290, 233, 3, 238, 236, 288, 235, 
	234, 1, 1, 233, 5, 236, 237, 233, 
	7, 233, 7, 239, 9, 247, 233, 31, 
	235, 270, 284, 286, 285, 248, 236, 249, 
	38, 233, 235, 241, 236, 233, 235, 242, 
	236, 233, 235, 242, 236, 246, 31, 248, 
	269, 250, 36, 251, 265, 267, 266, 241, 
	36, 252, 253, 261, 263, 262, 254, 255, 
	257, 259, 258, 256, 260, 264, 266, 251, 
	268, 269, 271, 272, 280, 282, 281, 273, 
	274, 276, 278, 277, 275, 279, 283, 285, 
	270, 287, 288, 289, 229
};

static const char _uri_parser_trans_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 5, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 21, 0, 1, 21, 1, 1, 
	1, 1, 0, 9, 0, 9, 1, 27, 
	1, 11, 0, 0, 1, 1, 39, 1, 
	18, 1, 1, 1, 1, 18, 39, 15, 
	1, 47, 33, 7, 47, 43, 24, 1, 
	43, 51, 36, 0, 51, 0, 0, 7, 
	1, 1, 1, 1, 1, 1, 1, 18, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 0
};

static const char _uri_parser_eof_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 21, 
	21, 30, 13, 9, 27, 11, 9, 39, 
	47, 43, 51, 47, 47, 47, 47, 47, 
	43, 39, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 51, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	21, 21, 21
};

static const int uri_parser_start = 231;
static const int uri_parser_first_final = 231;
static const int uri_parser_error = 0;

static const int uri_parser_en_main = 231;


#line 135 "../fwl/uri.rl"


//______Uri Implementation_____

/**
 * Create uri
 * */
Uri::ptr Uri::Create(const std::string & uriStr){
	Uri::ptr uri(new Uri);
	int cs = 0;
	const char * mark = 0;
	const char * p = uriStr.c_str();
	const char * pe = p + uriStr.size();
	const char * eof = pe;
	
#line 915 "../fwl/uri.cc"
	{
	cs = uri_parser_start;
	}

#line 150 "../fwl/uri.rl"
	
#line 922 "../fwl/uri.cc"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _uri_parser_trans_keys + _uri_parser_key_offsets[cs];
	_trans = _uri_parser_index_offsets[cs];

	_klen = _uri_parser_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _uri_parser_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _uri_parser_indicies[_trans];
	cs = _uri_parser_trans_targs[_trans];

	if ( _uri_parser_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _uri_parser_actions + _uri_parser_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 24 "../fwl/uri.rl"
	{ mark = p; }
	break;
	case 1:
#line 27 "../fwl/uri.rl"
	{
		if(mark){
			uri->setScheme(std::string(mark, p - mark));
		}
        mark = NULL;
    }
	break;
	case 2:
#line 34 "../fwl/uri.rl"
	{
		if(mark){
			uri->setUserinfo(std::string(mark, p - mark));
        }
		mark = NULL;
    }
	break;
	case 3:
#line 41 "../fwl/uri.rl"
	{
		if(mark){
			uri->setHost(std::string(mark, p - mark));
		}
		mark = NULL;
    }
	break;
	case 4:
#line 48 "../fwl/uri.rl"
	{
        //std::cout << (mark == nullptr) << " " << (fpc -mark) << std::endl;
		if(mark){
			uri->setPath(std::string(mark, p - mark));
		}
        mark = NULL;
    }
	break;
	case 5:
#line 56 "../fwl/uri.rl"
	{
        if (p != mark)
        {
            uri->setPort(atoi(mark));
        }
        mark = NULL;
    }
	break;
	case 6:
#line 64 "../fwl/uri.rl"
	{
        if(mark){
			uri->setQuery(std::string(mark, p - mark));
		}
        mark = NULL;
    }
	break;
#line 1056 "../fwl/uri.cc"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _uri_parser_actions + _uri_parser_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 0:
#line 24 "../fwl/uri.rl"
	{ mark = p; }
	break;
	case 3:
#line 41 "../fwl/uri.rl"
	{
		if(mark){
			uri->setHost(std::string(mark, p - mark));
		}
		mark = NULL;
    }
	break;
	case 4:
#line 48 "../fwl/uri.rl"
	{
        //std::cout << (mark == nullptr) << " " << (fpc -mark) << std::endl;
		if(mark){
			uri->setPath(std::string(mark, p - mark));
		}
        mark = NULL;
    }
	break;
	case 5:
#line 56 "../fwl/uri.rl"
	{
        if (p != mark)
        {
            uri->setPort(atoi(mark));
        }
        mark = NULL;
    }
	break;
	case 6:
#line 64 "../fwl/uri.rl"
	{
        if(mark){
			uri->setQuery(std::string(mark, p - mark));
		}
        mark = NULL;
    }
	break;
	case 7:
#line 71 "../fwl/uri.rl"
	{
        if(mark){
			uri->setFragment(std::string(mark, p - mark));
		}
        mark = NULL;
    }
	break;
#line 1123 "../fwl/uri.cc"
		}
	}
	}

	_out: {}
	}

#line 151 "../fwl/uri.rl"
	if(0 == uri -> m_port){
		uri -> setDefaultPort();
	}
	return uri;
}

//set default port 
void Uri::setDefaultPort(){
#define XX(defaultStr, port)	\
	if(0 == strcasecmp(str, defaultStr)){	\
		m_port = port;	\
	}
	
	const char * str = m_scheme.c_str();
	do{
		DEFAULT_PORT_MAP(XX)
	}while(0);	
#undef XX
}

/**
 * @brief is default port
 * */
bool Uri::isDefaultPort() const{
#define XX(defaultStr, port)	\
	if(0 == strcasecmp(str, defaultStr) && m_port == port){	\
		return true;	\
	}
	
 	const char * str = m_scheme.c_str();
	do{
		DEFAULT_PORT_MAP(XX);
	}while(0);
	return false;
}

/**
 * @brief create address by uri
 * */
Address::ptr Uri::CreateAddress(){
	auto addr = Address::LookupAnyIPAddress(m_host);
	if(addr){
		addr -> setPort(m_port);
	}
	return addr;
}

/**
 * @brief streaming output
 * */
std::ostream & Uri::toStream(std::ostream & os) const{
	os	<< m_scheme 
		<< (m_scheme.empty() ? "" : "://")
		<< m_userinfo	
		<< (m_userinfo.empty() ? "" : "@")
		<< m_host 
		<< ((m_host.empty() || isDefaultPort()) ? "" : (":" + std::to_string(m_port)))
		<< m_path
		<< (m_query.empty() ? "" : "?" )
		<< m_query 
	   	<< (m_fragment.empty() ? "" : "#")	
		<< m_fragment;
	return os;
}

/**
 * @brief String output
 * */
std::string Uri::toString() const{
	std::stringstream ss;
	toStream(ss);
	return ss.str();
}	

}
