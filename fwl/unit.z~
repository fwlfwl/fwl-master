#ifndef __H_FWL_UNIT__
#define __H_FWL_UNIT__

/**
* @file unit.h
* @brief ÎÄ¼þÄ£¿é·â×°
* @author fwl
* @email 1822363660@qq.com
* @data 2023-10-08
*/

#include<sys/stat.h>
#include"base_head.h"
#include<time.h>
#include<sys/syscall.h>
#include<malloc.h>
#include<fcntl.h>
#include"macro.h"

namespace fwl{

/**
 * @brief ´òÓ¡Òì³£¶ÑÕ»ÐÅÏ¢ 
 * @param[in,out] Òì³£¶ÑÕ»ÐÅÏ¢µÄvector
 * @param[in] skip Ìø¹ý²½Êý
 * @param[in] size ¶ÑÕ»²ãÊý
 * */
void Backtrace(std::vector<std::string> & buf_vec, int size =  64,int skip =  1);

/**
 * @brief Òì³£¶ÑÕ»ÐÅÏ¢×ª»¯³É×Ö·û´®Êä³ö
 * @param[in] skip Ìø¹ý²½Êý
 * @param[in] size ¶ÑÕ»²ãÊý
 * @param[in] priex Ç°×º×Ö·û´®
 * */
std::string BacktraceToString(int size =  64, int skip =  2,const std::string & prefix = "");

/**
 * @brief ·µ»Øµ±Ç°Ïß³ÌId
 */
pid_t getThreadId();

/**
 * @brief ·µ»Øµ±Ç°Ïß³ÌÃû
 * */
std::string getThreadName();

/**
 * @brief ·µ»Øµ±Ç°Ð­³ÌÃû
 * */
std::string getFiberName();


/**
 * @brief ·µ»Øµ±Ç°Ð­³ÌId
 * */
uint32_t getFiberId();

/**
 * @ÎÄµµ²Ù×÷Àà·â×°
 * */
class FSUnit {
public:
	/**
	* @breif ¿¿¿¿¿¿¿
	* @param[in,out] ofs ¿¿¿
	* @param[in,out] filename ¿¿¿
	* @param[in] mode ¿¿¿
	*/
	static bool OpenForWrite(std::ofstream& ofs, const std::string& filename, std::ios_base::openmode mode = std::ofstream::out | std::ofstream::app);
	
	/**
	* @breif ¿¿¿¿¿¿¿¿¿¿
	* @param[in] filename ¿¿¿ 
	* @param[out] ¿¿¿¿¿¿
	*/
	static const std::string Dirname(const std::string& filename);
	
	/**
	* @breif ¿¿¿¿¿
	* @param[in] path ¿¿¿
	* @param[out] ¿¿¿¿
	*/
	static bool MakeDir(const std::string& path);

	/**
	* @breif ¿¿¿¿
	* @param[in] path ¿¿¿¿¿
	* @param[in] st ¿¿¿¿
	* @param[out] ¿¿¿¿
	*/
	static int _lstat(const char * path,struct stat * st = nullptr);
	
        
    /**
    * @breif ¿¿¿¿¿
    * @param[in] path ¿¿¿¿¿
    * @param[in] mode ¿¿¿¿
    * @param[out] ¿¿¿¿
    * */
    static int _mkdir(const char * path,mode_t mode = S_IRWXU | S_IRWXG | S_IXOTH | S_IROTH);
};

/***
 * @brief malloc·â×°Àà
 */
class Allocater {
public:
    /**
     * @brief ¿¿¿¿
     * @param[in] size ¿¿¿¿¿¿
     * @param[out] ¿¿¿¿¿¿¿¿
     * */
    static void * allocate(size_t size);
    
    /**
     * @beief ¿¿¿¿
     * */
    static void deallocate(void * ptr);


};

/**
 * @brief fd¿¿¿¿¿
 * */
int setnonblocking(int fd);

/**
 * @brief ¿¿¿¿¿¿
 * */
uint64_t GetTimeMs();

/**
 * @brief ¿¿¿¿¿¿
 * */
uint64_t GetTimeUs();

/**
 * @brief base64 encode
 * */
std::string base64En(const unsigned char * in, size_t len);


/**
 * @brief SHA1
 * */
bool sha1(const std::string & in, unsigned char * out);

}
#endif // !_H_UNIT_
